////
/// global button styles - 1.0.1
/// @author Bernhard Ruoff
///
/// @param {boolean} $btn-round - can be set in config.scss

input[type=submit],
input[type=reset],
button,
.btn {
  background-color: getColor(btn, default);
  color: setColor(getColor(btn, default));
  font-weight: normal;
  @include border-radius(rem($btn-radius));
  position: relative;
  @include transition(background-color .4s);
  cursor: pointer;
  height: auto;

  * {
    cursor: pointer;
  }

  strong {
    vertical-align: baseline;
  }

  .pill {
    background-color: getColor(base, background);
    font-size: rem(12);
    font-weight: bold;
    line-height: rem(16);
    margin: 0;
    margin-right:rem(4);
    color: getColor(base, link);

    &:hover {
      background-color: getColor(base, background);
      color: getColor(base, link);
    }
  }

  .bubble {
    position: absolute;
    top: 0;
    right: rem(-8);
  }

  .label {
    pointer-events: none;
  }

  // default :hover and .active state
  &.active,
  &:hover,
  &:focus {
    background-color: getColor(btn, defaultHover);
    color: setColor(getColor(btn, default));
  }

  // little transform animation onclick
  &:active {
    @include transform(translate3d(0, 2px, 0));
  }

  &.dark {
    background-color: varColor(getColor(btn, default),-20);
    color: setColor(varColor(getColor(btn, default),-20));
  }

  // minor button style, for secondary or minor interactions

  &.minor {
    background-color: getColor(btn, minor);
    color: setColor(getColor(btn, minor));

    &.active,
    &:hover,
    &:focus {
      background-color: getColor(btn, minorHover);
      color: setColor(getColor(btn, minor));
    }

    &.invert {
      color: getColor(text, invert);

      &.active,
      &:hover,
      &:focus {
        color: getColor(text, invert);
      }
    }
  }

  // super button style, for call to action

  &.super {
    background-color: getColor(btn, super);
    color: setColor(getColor(btn, super));

    &.active,
    &:hover,
    &:focus {
      background-color: getColor(btn, superHover);
      color: setColor(getColor(btn, super));
    }
  }

  // clear button style, for link-alike buttons
  &.clear {
    background-color: transparent;
    color: getColor(base, link);

    &.active,
    &:hover,
    &:focus {
      background-color: getColor(state, hover);
      color: getColor(base, linkHover);
    }

    &.invert {
      color: getColor(text, invert);

      &.active,
      &:hover,
      &:focus {
        color: getColor(text, invert);
      }
    }
  }

  // outlined button style

  &.outlined {
    background-color: transparent;
    color: getColor(base, link);
    @include box-shadow(0 0 0 1px getColor(base, link));

    &.active,
    &:hover,
    &:focus {
      color: getColor(base, linkHover);
      background-color: transparent;
      @include box-shadow(0 0 0 2px getColor(base, linkHover));
    }

    &.invert {
      @include box-shadow(0 0 0 1px getColor(text, invert));
      color: getColor(text, invert);
      font-weight: bold;

      &.active,
      &:hover,
      &:focus {
        background-color: transparent;
        @include box-shadow(0 0 0 2px getColor(text, invert));
        color: getColor(text, invert);
      }
    }
  }

  // additional embossed class
  // TODO check for implementation in config.scss

  &.embossed {
    @extend %embossed%btn;
  }

  // style for ec-icon within a button
  .ec-icon {
    display: inline;

    &:empty {
      margin: 0 rem(-8);
    }

    &:before {
      vertical-align: top;
    }
  }

  // small buttons
  &.small {
    height: auto;
    @include border-radius(rem($btn-radius * .5));
  }

  // big buttons
  // TODO make style for big buttons

  &.big {
    height: auto;
  }

  // buttons with a minimum width
  &.wide {
    min-width: $btn-wide-width;
  }

  &.round {
    @include border-radius(rem(20));

    &.small {
      @include border-radius(rem(16));
    }

    &.big {
      @include border-radius(rem(24));
    }
  }

  // full-width buttons
  &.block {
    width: 100%;
    display: block;
    margin-left: 0;
    margin-right: 0;
  }
}

/// sets buttons to rounded
/// @param {boolean} $btn-round - can be set in config.scss

@if $btn-round == true {
  input[type=submit],
  input[type=reset],
  button,
  .btn {
    @include border-radius(rem(20));

    &.small {
      @include border-radius(rem(16));
    }

    &.big {
      @include border-radius(rem(24));
    }
  }
}